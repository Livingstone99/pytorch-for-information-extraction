(window.webpackJsonp=window.webpackJsonp||[]).push([[4],{324:function(e,t,i){"use strict";i.r(t),t.default=i.p+"assets/images/orientation-datasets-15615fe8643c50cd5ad61e4b00fa8250.svg"},325:function(e,t,i){"use strict";i.r(t),t.default=i.p+"assets/images/orientation-sample-37cfa7cd053b4264cb2666797a86bd66.svg"},326:function(e,t,i){"use strict";i.r(t),t.default=i.p+"assets/images/orientation-prediction-6d52d2a84333412809a9ae7e1cbb921b.svg"},52:function(e,t,i){"use strict";i.r(t),i.d(t,"frontMatter",(function(){return l})),i.d(t,"metadata",(function(){return d})),i.d(t,"rightToc",(function(){return c})),i.d(t,"default",(function(){return p}));var o=i(2),n=i(6),a=(i(0),i(73)),r=i(87),s=i(88),l={id:"orientation",sidebar_label:"2. Orientation",title:"Orientation Module",slug:"/orientation-module"},d={unversionedId:"orientation",id:"orientation",isDocsHomePage:!1,title:"Orientation Module",description:"To predict the orientation of an aligned student-id image inputted from the detection module, we shall quickly develop an image classification model and train it on our orientation dataset. We expect the trained orientation model to predict the confidence scores for orientation angles (90, 180, 270, and 360) for an input image.",source:"@site/docs\\orientation.md",slug:"/orientation-module",permalink:"/pytorch-for-information-extraction/orientation-module",editUrl:"https://github.com/MbassiJaphet/pytorch-for-information-extraction/edit/master/docs/orientation.md",version:"current",sidebar_label:"2. Orientation",sidebar:"tutorial",previous:{title:"Detection Module",permalink:"/pytorch-for-information-extraction/detection-module"},next:{title:"Extraction Module",permalink:"/pytorch-for-information-extraction/extraction-module"}},c=[{value:"<strong>2.1. Orientation Dataset</strong>",id:"21-orientation-dataset",children:[{value:"2.1.1. Define transforms for orientation datasets",id:"211-define-transforms-for-orientation-datasets",children:[]},{value:"2.1.2.  Instantiate orientation datasets",id:"212--instantiate-orientation-datasets",children:[]},{value:"2.1.3. Visualize orientation dataset",id:"213-visualize-orientation-dataset",children:[]}]},{value:"<strong>2.2. Orientation Model</strong>",id:"22-orientation-model",children:[{value:"2.2.1. Define Orientation Model",id:"221-define-orientation-model",children:[]},{value:"2.2.2. Specify checkpoint and instantiate model",id:"222-specify-checkpoint-and-instantiate-model",children:[]}]},{value:"<strong>2.3. Training and Evaluation</strong>",id:"23-training-and-evaluation",children:[{value:"2.3.1. Specify data loaders",id:"231-specify-data-loaders",children:[]},{value:"2.3.2. Define loss function and optimizer",id:"232-define-loss-function-and-optimizer",children:[]},{value:"2.3.3. Define training function",id:"233-define-training-function",children:[]},{value:"2.3.4. Train orientation model",id:"234-train-orientation-model",children:[]},{value:"2.3.5. Resume training orientation model",id:"235-resume-training-orientation-model",children:[]},{value:"2.3.6. Evaluate orientation model",id:"236-evaluate-orientation-model",children:[]}]}],u={rightToc:c};function p(e){var t=e.components,l=Object(n.a)(e,["components"]);return Object(a.b)("wrapper",Object(o.a)({},u,l,{components:t,mdxType:"MDXLayout"}),Object(a.b)("p",null,"To predict the orientation of an aligned student-id image inputted from the detection module, we shall quickly develop an image classification model and train it on our ",Object(a.b)("a",Object(o.a)({parentName:"p"},{href:"https://github.com/MbassiJaphet/pytorch-for-information-extraction/tree/master/code/datasets/orientation"}),"orientation dataset"),". We expect the trained orientation model to predict the confidence scores for orientation angles (90, 180, 270, and 360) for an input image."),Object(a.b)("p",null,"So, let's resolve the imports of our orientation module."),Object(a.b)(r.a,{file:"orientation_module_imports",mdxType:"CodeBlock"}),Object(a.b)("h2",{id:"21-orientation-dataset"},Object(a.b)("strong",{parentName:"h2"},"2.1. Orientation Dataset")),Object(a.b)("p",null,"The orientation datasets consist of folders containing four subfolders, whereby each subfolder is named according to one of the four orientation classes i.e. ",Object(a.b)("strong",{parentName:"p"},"'090'"),", ",Object(a.b)("strong",{parentName:"p"},"'180'"),", ",Object(a.b)("strong",{parentName:"p"},"'270'"),", and ",Object(a.b)("strong",{parentName:"p"},"'360'"),". Each subfolder contains images rotated according to their folder's name."),Object(a.b)("p",null,"Pytorch provides ",Object(a.b)("a",Object(o.a)({parentName:"p"},{href:"https://pytorch.org/docs/stable/torchvision/datasets.html#torchvision.datasets.ImageFolder"}),"torchvision.datasets.ImageFolder")," for loading datasets with such format without requiring us to hardcode a custom dataset class for the data like we did for the detection dataset.\n",Object(a.b)("img",{alt:"img",src:i(324).default})),Object(a.b)("h3",{id:"211-define-transforms-for-orientation-datasets"},"2.1.1. Define transforms for orientation datasets"),Object(a.b)("p",null,"Before instantiating our various orientation datasets, we have to define the various transforms which shall be used to initialize them."),Object(a.b)(r.a,{file:"orientation_dataset_transforms",mdxType:"CodeBlock"}),Object(a.b)("h3",{id:"212--instantiate-orientation-datasets"},"2.1.2.  Instantiate orientation datasets"),Object(a.b)("p",null,"We shall leverage Pytorch inbuilt torchvision.datasets.ImageFolder class to effortlessly instantiate our orientation training, validation, and testing datasets."),Object(a.b)(r.a,{file:"orientation_dataset_init",mdxType:"CodeBlock"}),Object(a.b)("p",null,"Just checking the names and number of classes from our orientation dataset to make sure everything is ",Object(a.b)("strong",{parentName:"p"},"OK"),"!"),Object(a.b)(r.a,{file:"orientation_dataset_classes",mdxType:"CodeBlock"}),Object(a.b)(s.a,{file:"orientation_dataset_classes_output",mdxType:"OutputBlock"}),Object(a.b)("h3",{id:"213-visualize-orientation-dataset"},"2.1.3. Visualize orientation dataset"),Object(a.b)(r.a,{file:"orientation_dataset_visualize",mdxType:"CodeBlock"}),Object(a.b)("p",null,Object(a.b)("img",{alt:"img",src:i(325).default})),Object(a.b)("h2",{id:"22-orientation-model"},Object(a.b)("strong",{parentName:"h2"},"2.2. Orientation Model")),Object(a.b)("h3",{id:"221-define-orientation-model"},"2.2.1. Define Orientation Model"),Object(a.b)("p",null,Object(a.b)("strong",{parentName:"p"},"Note")," that the model architecture defined below expects input image tensors of shape  ",Object(a.b)("strong",{parentName:"p"},"(3 x 224 x 224)")," taking after transforms of the orientation datasets.\nLet's define an architecture for our orientation model from scratch."),Object(a.b)(r.a,{file:"orientation_model",mdxType:"CodeBlock"}),Object(a.b)("p",null,"Now that we have defined the architecture of our orientation model, let's define the helper function to instantiate it !"),Object(a.b)(r.a,{file:"orientation_model_init_function",mdxType:"CodeBlock"}),Object(a.b)("h3",{id:"222-specify-checkpoint-and-instantiate-model"},"2.2.2. Specify checkpoint and instantiate model"),Object(a.b)("p",null,"Looking forward to ",Object(a.b)("strong",{parentName:"p"},"resumable")," training and saving of our orientation model, we shall now specify the checkpoints for the ",Object(a.b)("strong",{parentName:"p"},"state dictionaries")," of the model and its training optimizer while initializing the model at once."),Object(a.b)(r.a,{file:"orientation_checkpoint",mdxType:"CodeBlock"}),Object(a.b)(s.a,{file:"orientation_checkpoint_output",mdxType:"OutputBlock"}),Object(a.b)("p",null,"Let's print our orientation model to check if it has been initialized as we expect."),Object(a.b)(r.a,{file:"orientation_model_visualize",mdxType:"CodeBlock"}),Object(a.b)(s.a,{file:"orientation_model_visualize_output",mdxType:"OutputBlock"}),Object(a.b)("h2",{id:"23-training-and-evaluation"},Object(a.b)("strong",{parentName:"h2"},"2.3. Training and Evaluation")),Object(a.b)("h3",{id:"231-specify-data-loaders"},"2.3.1. Specify data loaders"),Object(a.b)("p",null,"After initializing the various orientation datasets, let us use them to specify data loaders which shall be used for training, validation, and testing."),Object(a.b)(r.a,{file:"orientation_dataset_loaders",mdxType:"CodeBlock"}),Object(a.b)("h3",{id:"232-define-loss-function-and-optimizer"},"2.3.2. Define loss function and optimizer"),Object(a.b)("p",null,"Let's initialize the optimizer for training the orientation model, and get ready for training !"),Object(a.b)(r.a,{file:"orientation_optimizer",mdxType:"CodeBlock"}),Object(a.b)("h3",{id:"233-define-training-function"},"2.3.3. Define training function"),Object(a.b)(r.a,{file:"orientation_model_train_function",mdxType:"CodeBlock"}),Object(a.b)("h3",{id:"234-train-orientation-model"},"2.3.4. Train orientation model"),Object(a.b)("p",null,"Now let's train our orientation model for 20 epochs."),Object(a.b)(r.a,{file:"orientation_model_train",mdxType:"CodeBlock"}),Object(a.b)(s.a,{file:"orientation_model_train_output",mdxType:"OutputBlock"}),Object(a.b)("h3",{id:"235-resume-training-orientation-model"},"2.3.5. Resume training orientation model"),Object(a.b)("p",null,"At the end of every epoch, we had the checkpoints of the orientation module updated. Now let's use these updated checkpoints to reload the orientation model with orientation optimizer and resume the training up to ",Object(a.b)("strong",{parentName:"p"},"'30'")," epochs."),Object(a.b)("div",{className:"admonition admonition-important alert alert--info"},Object(a.b)("div",Object(o.a)({parentName:"div"},{className:"admonition-heading"}),Object(a.b)("h5",{parentName:"div"},Object(a.b)("span",Object(o.a)({parentName:"h5"},{className:"admonition-icon"}),Object(a.b)("svg",Object(o.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"}),Object(a.b)("path",Object(o.a)({parentName:"svg"},{fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"})))),"important")),Object(a.b)("div",Object(o.a)({parentName:"div"},{className:"admonition-content"}),Object(a.b)("p",{parentName:"div"},"To reload the orientation model and the orientation optimizer from the checkpoint, simply re-run the code cells in Section 2.2.2. and Section 2.3.2 respectively. Just make sure ",Object(a.b)("inlineCode",{parentName:"p"},"load_orientation_checkpoint")," is set to ",Object(a.b)("inlineCode",{parentName:"p"},"True"),". The resulting outputs shall be identical to the ones below."))),Object(a.b)("p",null,"Reloading orientation model from the checkpoint. (Section 2.2.2)"),Object(a.b)(r.a,{file:"orientation_checkpoint",mdxType:"CodeBlock"}),Object(a.b)(s.a,{file:"orientation_model_init_checkpoint_output",mdxType:"OutputBlock"}),Object(a.b)("p",null,"Reloading orientation optimizer from the checkpoint (Section 2.3.2)"),Object(a.b)(r.a,{file:"orientation_optimizer",mdxType:"CodeBlock"}),Object(a.b)(s.a,{file:"orientation_optimizer_init_checkpoint_output",mdxType:"OutputBlock"}),Object(a.b)("p",null,"Now let's resume the training of our orientation model."),Object(a.b)(r.a,{file:"orientation_model_train_resume",mdxType:"CodeBlock"}),Object(a.b)(s.a,{file:"orientation_model_train_resume_output",mdxType:"OutputBlock"}),Object(a.b)("p",null,"You notice that the training starts from epoch 21 since the orientation model has already been trained for 20 epochs."),Object(a.b)("h3",{id:"236-evaluate-orientation-model"},"2.3.6. Evaluate orientation model"),Object(a.b)("p",null,"To conclude on the performance of your models, it is always of good practice to evaluate them on sample data. We shall evaluate the performance of the orientation model on sample images from the testing dataset."),Object(a.b)("p",null,"Firstly, let's use our orientation model to predict the orientation of an input image from the test orientation dataset."),Object(a.b)("p",null,"But, before that let's define the test function."),Object(a.b)(r.a,{file:"orientation_model_test_function",mdxType:"CodeBlock"}),Object(a.b)("p",null,"With our test function defined, we shall use it to evaluate the performance of the orientation model on the orientation test dataset."),Object(a.b)(r.a,{file:"orientation_model_test",mdxType:"CodeBlock"}),Object(a.b)(s.a,{file:"orientation_model_test_output",mdxType:"OutputBlock"}),Object(a.b)("p",null,"Secondly, let's properly visualize the performance of our orientation model via inference on sample images from the test dataset one at a time."),Object(a.b)("p",null,"Keep in mind that the objective behind an orientation module is to detect the orientation of an aligned document image, and to rectify it where necessary. Therefore, after inferencing every single image, we have shall apply the proper transformation to the image to rectify its orientation if necessary."),Object(a.b)(r.a,{file:"orientation_model_prediction_visualize",mdxType:"CodeBlock"}),Object(a.b)("p",null,Object(a.b)("img",{alt:"img",src:i(326).default})))}p.isMDXComponent=!0},87:function(e,t,i){"use strict";var o=i(0),n=i.n(o),a=(i(77),i(337)),r=i(336);class s extends n.a.Component{constructor(e){super(e),this.state={codeString:""},this._currentFile=null}static getDerivedStateFromProps(e,t){return e.id!==t.prevFile?{codeString:"",prevFile:e.file}:null}componentDidMount(){this._loadAsyncData(this.props.file)}componentDidUpdate(e,t){this.state.codeString||this._loadAsyncData(this.props.file)}componentWillUnmount(){this._currentFile=null}render(){return n.a.createElement(a.a,{language:"python",style:r.a,customStyle:l,codeTagProps:{style:{color:"#e0e0e0"}}},this.state.codeString)}_loadAsyncData(e){this._currentFile=e,fetch(`/pytorch-for-information-extraction/code-snippets/${e}.py`).then((e=>e.text())).then((t=>{e===this._currentFile&&this.setState({codeString:t})})).catch((e=>{console.log(e)}))}}t.a=s;const l={borderRadius:0,overflow:"auto",maxHeight:"75vh",fontSize:"0.67em",borderRadius:8}},88:function(e,t,i){"use strict";var o=i(0),n=i.n(o);class a extends n.a.Component{constructor(e){super(e),this._currentFile=null,this.state={outputString:""}}static getDerivedStateFromProps(e,t){return e.id!==t.prevFile?{outputString:"",prevFile:e.file}:null}componentDidMount(){this._loadAsyncData(this.props.file)}componentDidUpdate(e,t){this.state.outputString||this._loadAsyncData(this.props.file)}componentWillUnmount(){this._currentFile=null}render(){return n.a.createElement("pre",{className:"output-block"},n.a.createElement("code",null,this.state.outputString))}_loadAsyncData(e){this._currentFile=e,fetch(`/pytorch-for-information-extraction/code-snippets/${e}.txt`).then((e=>e.text())).then((t=>{e===this._currentFile&&this.setState({outputString:t})})).catch((e=>{console.log(e)}))}}t.a=a}}]);