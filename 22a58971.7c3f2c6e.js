(window.webpackJsonp=window.webpackJsonp||[]).push([[5],{326:function(e,t,n){"use strict";n.r(t),t.default=n.p+"assets/images/detection-datasets-ac8430fb8f4be3539a0ad271ce519111.svg"},327:function(e,t,n){"use strict";n.r(t),t.default=n.p+"assets/images/detection-sample-2297f873c30fffa91d665d132959c6b2.svg"},328:function(e,t,n){"use strict";n.r(t),t.default=n.p+"assets/images/student-id-01-0e31699e1baa524f068036c13e4c53b6.svg"},329:function(e,t,n){"use strict";n.r(t),t.default=n.p+"assets/images/detection-prediction-140d791c826f5968ee109c7cd3661f33.svg"},330:function(e,t,n){"use strict";n.r(t),t.default=n.p+"assets/images/image-alignment-0e5cbddee6adae8aff723dd8f4867986.svg"},60:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return d})),n.d(t,"metadata",(function(){return l})),n.d(t,"rightToc",(function(){return s})),n.d(t,"default",(function(){return p}));var i=n(2),o=n(6),a=(n(0),n(73)),c=(n(77),n(82)),r=n(83),d={id:"detection",sidebar_label:"1. Detection",title:"Detection Module",slug:"/detection-module"},l={unversionedId:"detection",id:"detection",isDocsHomePage:!1,title:"Detection Module",description:"To locate student-id(s) within images, we gonna fine-tune the state of art object segmentation algorithm Mask R-CNN  on top of pre-trained ResNet-50 available in torchvision models gallery.",source:"@site/docs/detection.md",slug:"/detection-module",permalink:"/pytorch-for-information-extraction/detection-module",editUrl:"https://github.com/MbassiJaphet/pytorch-for-information-extraction/edit/master/docs/detection.md",version:"current",sidebar_label:"1. Detection",sidebar:"tutorial",previous:{title:"Getting Started",permalink:"/pytorch-for-information-extraction/introduction"},next:{title:"Orientation Module",permalink:"/pytorch-for-information-extraction/orientation-module"}},s=[{value:"<strong>1.1. Detection Dataset</strong>",id:"11-detection-dataset",children:[{value:"1.1.1. Define dataset class",id:"111-define-dataset-class",children:[]},{value:"1.1.2. Define transforms for detection dataset",id:"112-define-transforms-for-detection-dataset",children:[]},{value:"1.1.3. Instantiate detection datasets",id:"113-instantiate-detection-datasets",children:[]},{value:"1.1.4. Visualize detection dataset",id:"114-visualize-detection-dataset",children:[]}]},{value:"<strong>1.2. Detection Model</strong>",id:"12-detection-model",children:[{value:"1.2.1. Define detection model",id:"121-define-detection-model",children:[]},{value:"1.2.2. Specify checkpoints and instantiate model",id:"122-specify-checkpoints-and-instantiate-model",children:[]}]},{value:"<strong>1.3. Training and Evaluation</strong>",id:"13-training-and-evaluation",children:[{value:"1.3.1. Specify data loaders",id:"131-specify-data-loaders",children:[]},{value:"1.3.2. Initialize optimizer",id:"132-initialize-optimizer",children:[]},{value:"1.3.3. Define training function",id:"133-define-training-function",children:[]},{value:"1.3.4 Train detection model",id:"134-train-detection-model",children:[]},{value:"1.3.5. Resume training detection model",id:"135-resume-training-detection-model",children:[]},{value:"1.3.6. Evaluate the detection model",id:"136-evaluate-the-detection-model",children:[]}]},{value:"<strong>1.4. Preparations for Orientation Module</strong>",id:"14-preparations-for-orientation-module",children:[]}],b={rightToc:s};function p(e){var t=e.components,d=Object(o.a)(e,["components"]);return Object(a.b)("wrapper",Object(i.a)({},b,d,{components:t,mdxType:"MDXLayout"}),Object(a.b)("p",null,"To locate student-id(s) within images, we gonna fine-tune the state of art object segmentation algorithm ",Object(a.b)("a",Object(i.a)({parentName:"p"},{href:"https://arxiv.org/abs/1703.06870"}),Object(a.b)("strong",{parentName:"a"},"Mask R-CNN")),"  on top of pre-trained ",Object(a.b)("a",Object(i.a)({parentName:"p"},{href:"https://pytorch.org/docs/stable/torchvision/models.html#mask-r-cnn"}),Object(a.b)("strong",{parentName:"a"},"ResNet-50"))," available in torchvision models gallery."),Object(a.b)("p",null,"So, let's resolve the imports of our detection module."),Object(a.b)(c.a,{file:"detection_module_imports",mdxType:"CodeBlock"}),Object(a.b)("h2",{id:"11-detection-dataset"},Object(a.b)("strong",{parentName:"h2"},"1.1. Detection Dataset")),Object(a.b)("h3",{id:"111-define-dataset-class"},"1.1.1. Define dataset class"),Object(a.b)("p",null,"A crucial requirement when fine-tuning, training, or inferencing models in Pytorch is to know the exact formats of data that specific models expect as inputs and compute as outputs."),Object(a.b)("p",null,"The input to the model is expected to be a list of tensors, each of shape ",Object(a.b)("inlineCode",{parentName:"p"},"[C, H, W]"),", one for each image, and should be in ",Object(a.b)("inlineCode",{parentName:"p"},"0-1")," range. Different images can have different sizes."),Object(a.b)("p",null,Object(a.b)("strong",{parentName:"p"},"Let's take a look at the formats the model expects for the targets"),"."),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},"boxes (",Object(a.b)("inlineCode",{parentName:"li"},"FloatTensor[N, 4]"),"): the ground-truth boxes in ",Object(a.b)("inlineCode",{parentName:"li"},"[x1, y1, x2, y2]")," format, with values of ",Object(a.b)("inlineCode",{parentName:"li"},"x")," between ",Object(a.b)("inlineCode",{parentName:"li"},"0")," and ",Object(a.b)("inlineCode",{parentName:"li"},"W")," and values of y between ",Object(a.b)("inlineCode",{parentName:"li"},"0")," and ",Object(a.b)("inlineCode",{parentName:"li"},"H"),"."),Object(a.b)("li",{parentName:"ul"},"labels (",Object(a.b)("inlineCode",{parentName:"li"},"Int64Tensor[N]"),"): the class label for each ground-truth box."),Object(a.b)("li",{parentName:"ul"},"masks (",Object(a.b)("inlineCode",{parentName:"li"},"UInt8Tensor[N, H, W]"),"): the segmentation binary masks for each instance.")),Object(a.b)("p",null,Object(a.b)("strong",{parentName:"p"},"Then, we shall also take a look at the outputs formats predicted by the model"),"."),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},"boxes (",Object(a.b)("inlineCode",{parentName:"li"},"FloatTensor[N, 4]"),"): the predicted boxes in ",Object(a.b)("inlineCode",{parentName:"li"},"[x1, y1, x2, y2]")," format, with values of ",Object(a.b)("inlineCode",{parentName:"li"},"x")," between ",Object(a.b)("inlineCode",{parentName:"li"},"0")," and ",Object(a.b)("inlineCode",{parentName:"li"},"W")," and values of ",Object(a.b)("inlineCode",{parentName:"li"},"y")," between ",Object(a.b)("inlineCode",{parentName:"li"},"0")," and ",Object(a.b)("inlineCode",{parentName:"li"},"H"),"."),Object(a.b)("li",{parentName:"ul"},"labels (",Object(a.b)("inlineCode",{parentName:"li"},"Int64Tensor[N]"),"): the predicted labels for each image."),Object(a.b)("li",{parentName:"ul"},"scores (",Object(a.b)("inlineCode",{parentName:"li"},"Tensor[N]"),"): the scores or each prediction."),Object(a.b)("li",{parentName:"ul"},"masks (",Object(a.b)("inlineCode",{parentName:"li"},"UInt8Tensor[N, 1, H, W]"),"): the predicted masks for each instance, in ",Object(a.b)("inlineCode",{parentName:"li"},"0-1")," range. To obtain the final segmentation masks, the soft masks can be thresholded, generally with a value of ",Object(a.b)("inlineCode",{parentName:"li"},"0.5")," (",Object(a.b)("inlineCode",{parentName:"li"},"mask >= 0.5"),").")),Object(a.b)("p",null,"Recall from the ",Object(a.b)("a",Object(i.a)({parentName:"p"},{href:"/introduction/#project-description/"}),"project description")," that we shall train our detection model on the ",Object(a.b)("a",Object(i.a)({parentName:"p"},{href:"https://github.com/MbassiJaphet/pytorch-for-information-extraction/tree/master/code/datasets/detection"}),Object(a.b)("strong",{parentName:"a"},"Student-ID"))," dataset. So let\u2019s examine its format !\n",Object(a.b)("img",{alt:"img",src:n(326).default})),Object(a.b)("p",null,"Now, knowing the formats of the Student-ID dataset as well as the formats of inputs/targets/outputs of the pre-trained model, we can confidently code a custom dataset class inheriting from ",Object(a.b)("a",Object(i.a)({parentName:"p"},{href:"https://pytorch.org/docs/stable/data.html#torch.utils.data.Dataset"}),"torch.utils.data.Dataset"),"."),Object(a.b)(c.a,{file:"detection_dataset",mdxType:"CodeBlock"}),Object(a.b)("h3",{id:"112-define-transforms-for-detection-dataset"},"1.1.2. Define transforms for detection dataset"),Object(a.b)("p",null,"Let's write some helper functions for data augmentation."),Object(a.b)(c.a,{file:"detection_dataset_transforms",mdxType:"CodeBlock"}),Object(a.b)("h3",{id:"113-instantiate-detection-datasets"},"1.1.3. Instantiate detection datasets"),Object(a.b)(c.a,{file:"detection_dataset_init",mdxType:"CodeBlock"}),Object(a.b)("p",null,"Just checking the names and number of classes from our detection dataset to make sure everything is ",Object(a.b)("strong",{parentName:"p"},"OK"),"!"),Object(a.b)(c.a,{file:"detection_dataset_classes",mdxType:"CodeBlock"}),Object(a.b)(r.a,{file:"detection_dataset_classes_output",mdxType:"OutputBlock"}),Object(a.b)("h3",{id:"114-visualize-detection-dataset"},"1.1.4. Visualize detection dataset"),Object(a.b)(c.a,{file:"detection_dataset_visualize",mdxType:"CodeBlock"}),Object(a.b)("p",null,Object(a.b)("img",{alt:"img",src:n(327).default})),Object(a.b)("h2",{id:"12-detection-model"},Object(a.b)("strong",{parentName:"h2"},"1.2. Detection Model")),Object(a.b)("h3",{id:"121-define-detection-model"},"1.2.1. Define detection model"),Object(a.b)("p",null,"Let's define a helper function to instantiate the detection model !"),Object(a.b)(c.a,{file:"detection_model_init_function",mdxType:"CodeBlock"}),Object(a.b)("blockquote",null,Object(a.b)("p",{parentName:"blockquote"},Object(a.b)("strong",{parentName:"p"},"Remark:")," The helper function above allows us to fine-tune the pre-trained ",Object(a.b)("strong",{parentName:"p"},"FastRCNNPredictor")," and ",Object(a.b)("strong",{parentName:"p"},"MaskRCNNPredictor")," with the desired number of classes, which are ",Object(a.b)("strong",{parentName:"p"},"'2'")," in our case i.e. for the 'BACKGROUND' and 'Student_ID' classes. The function also sets the number of hidden layers of ",Object(a.b)("strong",{parentName:"p"},"MaskRCNNPredictor")," to ",Object(a.b)("strong",{parentName:"p"},"'256'")," but we can decide to tweak that for the best of our model performance.")),Object(a.b)("h3",{id:"122-specify-checkpoints-and-instantiate-model"},"1.2.2. Specify checkpoints and instantiate model"),Object(a.b)("p",null,"Looking forward to ",Object(a.b)("strong",{parentName:"p"},"resumable")," training and saving of our detection model, we shall now specify the checkpoints for the ",Object(a.b)("strong",{parentName:"p"},"state dictionaries")," of the model and its training optimizer."),Object(a.b)(c.a,{file:"detection_checkpoint",mdxType:"CodeBlock"}),Object(a.b)(r.a,{file:"detection_checkpoint_output",mdxType:"OutputBlock"}),Object(a.b)("h2",{id:"13-training-and-evaluation"},Object(a.b)("strong",{parentName:"h2"},"1.3. Training and Evaluation")),Object(a.b)("p",null,Object(a.b)("strong",{parentName:"p"},"Note")," that the files used for training and validation of detection module found ",Object(a.b)("inlineCode",{parentName:"p"},"./modules/detection/scripts")," folder were directly copied along with their dependencies from torchvision reference detection training scripts repository."),Object(a.b)("h3",{id:"131-specify-data-loaders"},"1.3.1. Specify data loaders"),Object(a.b)("p",null,"After initializing the various detection datasets, let us use them to specify data loaders which shall be used for training, validation, and testing."),Object(a.b)(c.a,{file:"detection_dataset_loaders",mdxType:"CodeBlock"}),Object(a.b)("h3",{id:"132-initialize-optimizer"},"1.3.2. Initialize optimizer"),Object(a.b)("p",null,"Let's initialize the optimizer for training the detection model, and get ready for training !"),Object(a.b)(c.a,{file:"detection_optimizer_init",mdxType:"CodeBlock"}),Object(a.b)("h3",{id:"133-define-training-function"},"1.3.3. Define training function"),Object(a.b)("p",null,"Now, let's write the function that will train and validate our model for us. Inside the training function, we shall add a few lines of code that will save our model checkpoints."),Object(a.b)(c.a,{file:"detection_model_train_function",mdxType:"CodeBlock"}),Object(a.b)("h3",{id:"134-train-detection-model"},"1.3.4 Train detection model"),Object(a.b)("p",null,"So let\u2019s train our detection model for 20 epochs saving it at the end of each epoch."),Object(a.b)(c.a,{file:"detection_model_train",mdxType:"CodeBlock"}),Object(a.b)(r.a,{file:"detection_model_train_output",mdxType:"OutputBlock"}),Object(a.b)("h3",{id:"135-resume-training-detection-model"},"1.3.5. Resume training detection model"),Object(a.b)("p",null,"At the end of every epoch, we had the checkpoints of the detection module updated. Now let's use these updated checkpoints to reload the detection model and resume its training up to ",Object(a.b)("strong",{parentName:"p"},"'30'")," epochs."),Object(a.b)("div",{className:"admonition admonition-important alert alert--info"},Object(a.b)("div",Object(i.a)({parentName:"div"},{className:"admonition-heading"}),Object(a.b)("h5",{parentName:"div"},Object(a.b)("span",Object(i.a)({parentName:"h5"},{className:"admonition-icon"}),Object(a.b)("svg",Object(i.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"}),Object(a.b)("path",Object(i.a)({parentName:"svg"},{fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"})))),"important")),Object(a.b)("div",Object(i.a)({parentName:"div"},{className:"admonition-content"}),Object(a.b)("p",{parentName:"div"},"To reload the detection model and the detection optimizer from the checkpoint, simply re-run the code cells in Section 1.2.2. and Section 1.3.2 respectively. Just make sure ",Object(a.b)("inlineCode",{parentName:"p"},"load_detection_checkpoint")," is set to ",Object(a.b)("inlineCode",{parentName:"p"},"True"),". The resulting outputs shall be identical to the ones below."))),Object(a.b)("p",null,"Reloading detection model from the checkpoint. (Section 1.2.2)"),Object(a.b)(r.a,{file:"detection_model_init_checkpoint_output",mdxType:"OutputBlock"}),Object(a.b)("p",null,"Reloading detection optimizer from the checkpoint (Section 1.3.2)"),Object(a.b)(r.a,{file:"detection_optimizer_init_checkpoint_output",mdxType:"OutputBlock"}),Object(a.b)("p",null,"Now let's resume training of our detection model."),Object(a.b)(c.a,{file:"detection_model_train_resume",mdxType:"CodeBlock"}),Object(a.b)(r.a,{file:"detection_model_train_resume_output",mdxType:"OutputBlock"}),Object(a.b)("p",null,"You notice that the training start from epoch 21 since the detection model has already been trained for 20 epochs."),Object(a.b)("h3",{id:"136-evaluate-the-detection-model"},"1.3.6. Evaluate the detection model"),Object(a.b)("p",null,"To conclude on the performance of your models, it is always of good practice to evaluate them on sample data. We shall evaluate the performance of the detection model on sample images from the testing dataset."),Object(a.b)("p",null,"Firstly, let's use our detection model to compute predictions for an input image from the test detection dataset."),Object(a.b)(c.a,{file:"detection_model_predict",mdxType:"CodeBlock"}),Object(a.b)("p",null,Object(a.b)("img",{alt:"img",src:n(328).default})),Object(a.b)("p",null,"Secondly, let's take a look at the raw outputs predicted by our detection model for the image above."),Object(a.b)(c.a,{file:"detection_model_predictions_raw",mdxType:"CodeBlock"}),Object(a.b)(r.a,{file:"detection_model_predictions_raw_output",mdxType:"OutputBlock"}),Object(a.b)("p",null,"Lastly, let's convert the raw predicted outputs into a human-understandable format for proper visualization."),Object(a.b)(c.a,{file:"detection_model_predictions_visualize",mdxType:"CodeBlock"}),Object(a.b)("p",null,Object(a.b)("img",{alt:"img",src:n(329).default})),Object(a.b)("h2",{id:"14-preparations-for-orientation-module"},Object(a.b)("strong",{parentName:"h2"},"1.4. Preparations for Orientation Module")),Object(a.b)("p",null,"At the beginning of this tutorial, we've mentioned that the goal of the detection module was to predict the position of documents of interest (which are student-ids in our case) with-in an image, but it does more than that. The segmentation mask computed for a student-id is used to perform image alignment on its corresponding student-id. The resulting aligned image is then fed as input to the orientation module."),Object(a.b)(c.a,{file:"detection_module_preparations",mdxType:"CodeBlock"}),Object(a.b)("p",null,Object(a.b)("img",{alt:"img",src:n(330).default})))}p.isMDXComponent=!0},82:function(e,t,n){"use strict";var i,o=n(3),a=n(0),c=n.n(a),r=(n(77),n(338)),d=n(337),l=function(e){function t(t){var n;return(n=e.call(this,t)||this).state={codeString:""},n._currentFile=null,n}Object(o.a)(t,e),t.getDerivedStateFromProps=function(e,t){return e.id!==t.prevFile?{codeString:"",prevFile:e.file}:null};var n=t.prototype;return n.componentDidMount=function(){this._loadAsyncData(this.props.file)},n.componentDidUpdate=function(e,t){this.state.codeString||this._loadAsyncData(this.props.file)},n.componentWillUnmount=function(){this._currentFile=null},n.render=function(){return c.a.createElement(r.a,{language:"python",style:d.a,customStyle:s,codeTagProps:{style:{color:"#e0e0e0"}}},this.state.codeString)},n._loadAsyncData=function(e){var t=this;this._currentFile=e,fetch("/pytorch-for-information-extraction/code-snippets/"+e+".py").then((function(e){return e.text()})).then((function(n){e===t._currentFile&&t.setState({codeString:n})})).catch((function(e){console.log(e)}))},t}(c.a.Component);t.a=l;var s=((i={borderRadius:0,overflow:"auto",maxHeight:"75vh",fontSize:"0.67em"}).borderRadius=8,i)},83:function(e,t,n){"use strict";var i=n(3),o=n(0),a=n.n(o),c=function(e){function t(t){var n;return(n=e.call(this,t)||this)._currentFile=null,n.state={outputString:""},n}Object(i.a)(t,e),t.getDerivedStateFromProps=function(e,t){return e.id!==t.prevFile?{outputString:"",prevFile:e.file}:null};var n=t.prototype;return n.componentDidMount=function(){this._loadAsyncData(this.props.file)},n.componentDidUpdate=function(e,t){this.state.outputString||this._loadAsyncData(this.props.file)},n.componentWillUnmount=function(){this._currentFile=null},n.render=function(){return a.a.createElement("pre",{className:"output-block"},a.a.createElement("code",null,this.state.outputString))},n._loadAsyncData=function(e){var t=this;this._currentFile=e,fetch("/pytorch-for-information-extraction/code-snippets/"+e+".txt").then((function(e){return e.text()})).then((function(n){e===t._currentFile&&t.setState({outputString:n})})).catch((function(e){console.log(e)}))},t}(a.a.Component);t.a=c}}]);